y.column='character',
x.columns='character',
training.y='character',
training.x='data.frame',
testing.y='character',
testing.x='data.frame'
# training.x.factors='data.frame',
# training.x.datamatrix='matrix',
# testing.x.factors='data.frame',
# testing.x.datamatrix='matrix'
))
data.sets <- data.sets.class()
strAsFactors <- FALSE
if(real.output) {
data.sets@training <- read.csv(training.path, header=TRUE, stringsAsFactors = strAsFactors)
data.sets@testing <- read.csv(testing.path, header=TRUE, stringsAsFactors = strAsFactors)
} else {
data <- read.csv(training.path, header=TRUE, stringsAsFactors = strAsFactors)
split = sample.split(data[[y.column]], SplitRatio=0.7)
data.sets@training = data[ split,]
data.sets@testing <- data[!split,]
}
# Set the ID Column as the rownames and then remove it
rownames(data.sets@training) <- data.sets@training[[id.column]]
rownames(data.sets@testing) <- data.sets@testing[[id.column]]
data.sets@training <- data.sets@training[ , !(names(data.sets@training) == id.column)]
data.sets@testing <- data.sets@testing[ , !(names(data.sets@testing) == id.column)]
# Remove the columns not in keep.only
if(!is.null(keep.only)){
data.sets@training <- data.sets@training[, names(data.sets@training) %in% c(y.column, keep.only)]
data.sets@testing <- data.sets@testing[, names(data.sets@testing) %in% c(y.column, keep.only)]
}
#Set the Y and X Column Names
data.sets@y.column <- y.column
data.sets@x.columns <- names(data.sets@training)[!(names(data.sets@training) %in% c(id.column, y.column))]
#Set the X and Y for training
data.sets@training.y <- as.character(data.sets@training[[data.sets@y.column]])
data.sets@training.x <- data.sets@training[ , !(names(data.sets@training) == data.sets@y.column)]
if(!real.output)
data.sets@testing.y <- as.character(data.sets@testing[[data.sets@y.column]])
data.sets@testing.x <- data.sets@testing[ , !(names(data.sets@testing) == data.sets@y.column)]
data.sets
}
regenerateXandY <- function(data.sets){
#Set the X and Y for training
data.sets@training.y <- as.character(data.sets@training[[data.sets@y.column]])
data.sets@training.x <- data.sets@training[ , !(names(data.sets@training) == data.sets@y.column)]
if(length(data.sets@testing.y) > 0)
data.sets@testing.y <- as.character(data.sets@testing[[data.sets@y.column]])
data.sets@testing.x <- data.sets@testing[ , !(names(data.sets@testing) == data.sets@y.column)]
data.sets
}
## LOAD DATA ##
training.path <- 'D:/Downloads/train2016.csv'
testing.path <- 'D:/Downloads/test2016.csv'
real.output <- FALSE
y.column <- 'Party'
id.column <- c('USER_ID')
keep.only <- c('YOB', 'Gender', 'Income', 'HouseholdStatus', 'EducationLevel',
'Q121699', 'Q121700', 'Q120978', 'Q121011', 'Q120650', 'Q120472', 'Q120012',
'Q119851', 'Q119650', 'Q118892', 'Q118117', 'Q115611', 'Q111848', 'Q110740')
# keep.only  <- NULL
data.sets <- getDataSets(training.path, testing.path, real.output, y.column, id.column, keep.only)
#add missing years
missing.year <- as.integer(mean(data.sets@training$YOB[!is.na(data.sets@training$YOB)]))
data.sets@training$YOB <- ifelse(is.na(data.sets@training$YOB), missing.year, data.sets@training$YOB)
data.sets@testing$YOB <- ifelse(is.na(data.sets@testing$YOB), missing.year, data.sets@testing$YOB)
#Remove missing values
data.sets@training[data.sets@training == ""] <- 'MISSING'
data.sets@testing[data.sets@testing == ""] <- 'MISSING'
#convert to factors
data.sets@training <- as.data.frame(unclass(data.sets@training), row.names = rownames(data.sets@training))
data.sets@testing <- as.data.frame(unclass(data.sets@testing), row.names = rownames(data.sets@testing))
# regenerate and convert to factors x and y
data.sets <- regenerateXandY(data.sets)
data.sets@training.x <- as.data.frame(unclass(data.sets@training.x), row.names = rownames(data.sets@training.x))
data.sets@testing.x <- as.data.frame(unclass(data.sets@testing.x), row.names = rownames(data.sets@testing.x))
str(data.sets@training)
summary(data.sets@training.x)
summary(data.sets@testing)
##################################################################
###################### MODELS ######################
#df for the results of the models
results <- data.frame(USER_ID=as.integer(rownames(data.sets@testing.x)))
head(results, n =20)
########## LOGISTIC REGRESSION CVGLM ############
model_cvglm <- cv.glmnet(data.matrix(data.sets@training.x), as.factor(data.sets@training.y), family = 'binomial', keep=TRUE)
# predict with the best lambda
prediction_cvglm <- predict.cv.glmnet(model_cvglm, data.matrix(data.sets@testing.x), type = 'response', s="lambda.min")
# head(prediction_cvglm)
prediction_cvglm_class <- ifelse(prediction_cvglm <= 0.5, "Democrat", "Republican")
#For Testing
if(!real.output)
confusionMatrix(prediction_cvglm_class, data.sets@testing.y)
#Add to results
results$cvglm <- prediction_cvglm_class
results$cvglm_prob <- ifelse(prediction_cvglm <= 0.5, (1-prediction_cvglm), prediction_cvglm)
########## LOGISTIC REGRESSION GLM ############
model.glm = glm(formula=Party ~ .,  data=data.sets@training,  family=binomial)
prediction_glm <- predict(model.glm, data.sets@testing.x, type="response")
# head(prediction_glm)
prediction_glm_class <- ifelse(prediction_glm <= 0.5, "Democrat", "Republican")
#For Testing
if(!real.output)
confusionMatrix(prediction_glm_class, data.sets@testing.y)
#Add to results
results$glm <- prediction_glm_class
results$glm_prob <- ifelse(prediction_glm <= 0.5, (1-prediction_cvglm), prediction_cvglm)
########## NAIVE BAYES ############
model.nb <- naiveBayes(data.sets@training, as.factor(data.sets@training$Party))
prediction.nb <- predict(model.nb,  newdata = data.sets@testing.x, laplace = 3, type = "raw")
head(prediction.nb)
prediction.nb.class <- ifelse(prediction.nb[,1] >= 0.5, "Democrat", "Republican")
#For Testing
if(!real.output)
confusionMatrix(prediction.nb.class, data.sets@testing.y)
#Add to results
results$nb <- prediction_glm_class
results$nb_prob <- ifelse(prediction.nb[,1] >= 0.5, prediction.nb[,1], prediction.nb[,2])
########## SVM ############
# model_svm <- ksvm(Party ~ . ,data=data.sets@training, kernel="rbfdot", kpar=list(sigma=0.05), C=5, cross=3)
# model_svm <- ksvm(data.matrix(data.sets@training.x), data.matrix(data.sets@training.y), type = "C-svc", C = 100, kernel='tanhdot', prob.model=T)
model_svm <- svm(Party ~ . , data=data.sets@training, probability = TRUE)
prediction_svm <- predict(model_svm, data.sets@testing.x, probability = TRUE)
head(prediction_svm)
str(prediction_svm)
head(attr(prediction_svm, "decision.values"))
summary(attr(prediction_svm, "probabilities"))
prediction.svm.class <- ifelse(attr(prediction_svm, "probabilities")[,1] >= 0.5, "Democrat", "Republican")
#For Testing
if(!real.output)
confusionMatrix(prediction_svm, data.sets@testing.y)
#Add to results
results$svm <- prediction.svm.class
results$svm_prob <- ifelse(attr(prediction_svm, "probabilities")[,1] >= 0.5, attr(prediction_svm, "probabilities")[,1], attr(prediction_svm, "probabilities")[,2])
########## RANDOM FOREST ############
if(!real.output) {
model_rf <- randomForest(data.matrix(data.sets@training.x), as.factor(data.sets@training.y), data.matrix(data.sets@testing.x), as.factor(data.sets@testing.y))
} else {
model_rf <- randomForest(data.matrix(data.sets@training.x), as.factor(data.sets@training.y), data.matrix(data.sets@testing.x))
}
head(model_rf$test$votes)
head(model_rf$test$predicted)
prediction.rf.class <- ifelse(model_rf$test$votes[,1] >= 0.5, "Democrat", "Republican")
#For Testing
if(!real.output)
confusionMatrix(prediction.rf.class, data.sets@testing.y)
#Add to results
results$rf <- prediction.rf.class
results$rf_prob <- ifelse(model_rf$test$votes[,1] >= 0.5, model_rf$test$votes[,1], model_rf$test$votes[,2])
########## RESULTS!! ############
#For Testing
#By probability
results$finalClass <- 'Democrat'
for (i in 1:nrow(results)) {
currentMax <- 0
currentClass <- 'Democrat'
if(results[i, "rf_prob"] > currentMax){
currentClass <- results[i, "rf"]
currentMax <- results[i, "rf_prob"]
}
if(results[i, "svm_prob"] > currentMax){
currentClass <- results[i, "svm"]
currentMax <- results[i, "svm_prob"]
}
if(results[i, "nb_prob"] > currentMax){
currentClass <- results[i, "nb"]
currentMax <- results[i, "nb_prob"]
}
if(results[i, "cvglm_prob"] > currentMax){
currentClass <- results[i, "cvglm"]
currentMax <- results[i, "cvglm_prob"]
}
if(results[i, "glm_prob"] > currentMax){
currentClass <- results[i, "glm"]
currentMax <- results[i, "glm_prob"]
}
results[i, "finalClass"] <-currentClass
}
if(!real.output)
confusionMatrix(results$finalClass, data.sets@testing.y)
library(doParallel)
#IMPORTS
# install.packages('norm')
library(e1071)
library(caTools)
library(caret)
library(glmnet)
library(kernlab)
library(norm)
library(randomForest)
library(doParallel)
## FUNCTIONS ##
getDataSets <- function(training.path, testing.path, real.output, y.column, id.column, keep.only = NULL) {
data.sets.class <- setClass(Class='data.sets', slots = c(
training='data.frame',
testing='data.frame',
y.column='character',
x.columns='character',
training.y='character',
training.x='data.frame',
testing.y='character',
testing.x='data.frame'
# training.x.factors='data.frame',
# training.x.datamatrix='matrix',
# testing.x.factors='data.frame',
# testing.x.datamatrix='matrix'
))
data.sets <- data.sets.class()
strAsFactors <- FALSE
if(real.output) {
data.sets@training <- read.csv(training.path, header=TRUE, stringsAsFactors = strAsFactors)
data.sets@testing <- read.csv(testing.path, header=TRUE, stringsAsFactors = strAsFactors)
} else {
data <- read.csv(training.path, header=TRUE, stringsAsFactors = strAsFactors)
split = sample.split(data[[y.column]], SplitRatio=0.7)
data.sets@training = data[ split,]
data.sets@testing <- data[!split,]
}
# Set the ID Column as the rownames and then remove it
rownames(data.sets@training) <- data.sets@training[[id.column]]
rownames(data.sets@testing) <- data.sets@testing[[id.column]]
data.sets@training <- data.sets@training[ , !(names(data.sets@training) == id.column)]
data.sets@testing <- data.sets@testing[ , !(names(data.sets@testing) == id.column)]
# Remove the columns not in keep.only
if(!is.null(keep.only)){
data.sets@training <- data.sets@training[, names(data.sets@training) %in% c(y.column, keep.only)]
data.sets@testing <- data.sets@testing[, names(data.sets@testing) %in% c(y.column, keep.only)]
}
#Set the Y and X Column Names
data.sets@y.column <- y.column
data.sets@x.columns <- names(data.sets@training)[!(names(data.sets@training) %in% c(id.column, y.column))]
#Set the X and Y for training
data.sets@training.y <- as.character(data.sets@training[[data.sets@y.column]])
data.sets@training.x <- data.sets@training[ , !(names(data.sets@training) == data.sets@y.column)]
if(!real.output)
data.sets@testing.y <- as.character(data.sets@testing[[data.sets@y.column]])
data.sets@testing.x <- data.sets@testing[ , !(names(data.sets@testing) == data.sets@y.column)]
data.sets
}
regenerateXandY <- function(data.sets){
#Set the X and Y for training
data.sets@training.y <- as.character(data.sets@training[[data.sets@y.column]])
data.sets@training.x <- data.sets@training[ , !(names(data.sets@training) == data.sets@y.column)]
if(length(data.sets@testing.y) > 0)
data.sets@testing.y <- as.character(data.sets@testing[[data.sets@y.column]])
data.sets@testing.x <- data.sets@testing[ , !(names(data.sets@testing) == data.sets@y.column)]
data.sets
}
## LOAD DATA ##
training.path <- 'D:/Downloads/train2016.csv'
testing.path <- 'D:/Downloads/test2016.csv'
real.output <- TRUE
y.column <- 'Party'
id.column <- c('USER_ID')
# keep.only <- c('YOB', 'Gender', 'Income', 'HouseholdStatus', 'EducationLevel',
#     'Q121699', 'Q121700', 'Q120978', 'Q121011', 'Q120650', 'Q120472', 'Q120012',
#     'Q119851', 'Q119650', 'Q118892', 'Q118117', 'Q115611', 'Q111848', 'Q110740')
keep.only  <- NULL
data.sets <- getDataSets(training.path, testing.path, real.output, y.column, id.column, keep.only)
#add missing years
missing.year <- as.integer(mean(data.sets@training$YOB[!is.na(data.sets@training$YOB)]))
data.sets@training$YOB <- ifelse(is.na(data.sets@training$YOB), missing.year, data.sets@training$YOB)
data.sets@testing$YOB <- ifelse(is.na(data.sets@testing$YOB), missing.year, data.sets@testing$YOB)
#Remove missing values
data.sets@training[data.sets@training == ""] <- 'MISSING'
data.sets@testing[data.sets@testing == ""] <- 'MISSING'
#convert to factors
data.sets@training <- as.data.frame(unclass(data.sets@training), row.names = rownames(data.sets@training))
data.sets@testing <- as.data.frame(unclass(data.sets@testing), row.names = rownames(data.sets@testing))
# regenerate and convert to factors x and y
data.sets <- regenerateXandY(data.sets)
data.sets@training.x <- as.data.frame(unclass(data.sets@training.x), row.names = rownames(data.sets@training.x))
data.sets@testing.x <- as.data.frame(unclass(data.sets@testing.x), row.names = rownames(data.sets@testing.x))
str(data.sets@training)
summary(data.sets@training.x)
summary(data.sets@testing)
dim(data.sets@training.x)
# sets of number of variables to test
subsets <- c(1:106)
# function for rfe
rfe_functions <-  list(summary = defaultSummary,
fit = function(x, y, first, last, ...){
library(randomForest)
randomForest(x, as.vector(y), importance = first, ...)
},
pred = function(object, x)  predict(object, x),
rank = function(object, x, y) {
vimp <- varImp(object)
vimp <- vimp[order(vimp$Overall,decreasing = TRUE),,drop = FALSE]
vimp$var <- rownames(vimp)
vimp
},
selectSize = pickSizeBest,
selectVar = pickVars)
# options for rfe
rfe_ctrl <- rfeControl(functions = rfe_functions,
method = "repeatedcv",
repeats = 4,
returnResamp = "all",
verbose = T)
# parallelize
cl<-makeCluster(detectCores() - 1)
registerDoParallel(cl)
set.seed(1234)
strt <- Sys.time()
# recursive feature elimination
rfe_profile <- rfe(data.sets@training.x, data.sets@training.y, sizes = subsets, rfeControl = rfe_ctrl)
cat("Selection Duration:", Sys.time()-strt)
stopCluster(cl)
# see results
rfe_profile
# plot the results
trellis.par.set(caretTheme())
plot1 <- plot(rfe_profile, type = c("g", "o"))
plot2 <- plot(rfe_profile, type = c("g", "o"), metric = "Rsquared")
print(plot1, split=c(1,1,1,2), more=TRUE)
print(plot2, split=c(1,2,1,2))
as.numeric(data.sets@training.y)
as.factor(data.sets@training.y)
detectCores()
strt <- Sys.time()
# recursive feature elimination
rfe_profile <- rfe(data.sets@training.x, as.factor(data.sets@training.y), sizes = subsets, rfeControl = rfe_ctrl)
cat("Selection Duration:", Sys.time()-strt)
stopCluster(cl)
stopCluster(cl)
# parallelize
cl<-makeCluster(detectCores() - 1)
registerDoParallel(cl)
set.seed(1234)
strt <- Sys.time()
# recursive feature elimination
rfe_profile <- rfe(data.sets@training.x, as.factor(data.sets@training.y), sizes = subsets, rfeControl = rfe_ctrl)
cat("Selection Duration:", Sys.time()-strt)
stopCluster(cl)
y_numeric <- ifelse(data.sets@training.y == 'Democrat', 1, 2)
# parallelize
cl<-makeCluster(detectCores() - 1)
registerDoParallel(cl)
set.seed(1234)
strt <- Sys.time()
# recursive feature elimination
y_numeric <- ifelse(data.sets@training.y == 'Democrat', 1, 2)
rfe_profile <- rfe(data.sets@training.x, y_numeric, sizes = subsets, rfeControl = rfe_ctrl)
stopCluster(cl)
}
help()
else
else if (i%%5 == 0)
else print("fizz")
}
print(i)}
for (i in 1:100){
}
for (i in 1:100){
if (i%%3 == 0)
if (i%%5 == 0){
print("fizzbuzz")}
else {
print("fizz")}
else if (i%%5 == 0){
print("buzz")}
else{
print(i)}
}
f <- function(num = 1) {
hello <- "Hello, world!\n"
for(i in seq_len(num)) {
cat(hello)
}
chars <- nchar(hello) * num
chars
}
f()
f <- function(num = 1) {
hello <- "Hello, world!\n"
for(i in seq_len(num)) {
cat(hello)
}
chars <- nchar(hello) * num
chars
}
f(2)
f <- function(num = 1) {
hello <- "Hello, world!\n"
for(i in seq_len(num)) {
cat(hello)
}
chars <- nchar(hello) * num
chars
}
f(5)
f <- function(num = 1) {
hello <- "Hello, world!\n"
for(i in seq_len(num)) {
cat(hello)
}
chars <- nchar(hello) * num
chars
}
f(1)
b <- 4
f <- function (a){
b <- 3
b^3 + g (a)
}
g <- function (a) {
a*b
}
f(2)
b <- 4
f <- function (a){
b <- 3
print(b)
b^3 + g (a)
}
g <- function (a) {
a*b
}
f(2)
x <- 1:3
y <- 10:12
rbind(x, y)
require(klaR)
require(stats)
require(lattice)
require(corrplot)
library(FactoMineR)
# Changes the working directory to the folder of the current file
this.dir <- NULL
tryCatch(this.dir <- dirname(sys.frame(1)$ofile), error = function(e) print('Getting file path from location of the file.'))
if(is.null(this.dir))
this.dir <-dirname(rstudioapi::getActiveDocumentContext()$path)
if(is.null(this.dir)){
print("Setting working directory failed. Script might fail to work.")
}else{
setwd(this.dir)
print(paste("Working directory changed successfully to: ", this.dir))
}
#Read CSV File
mydata = read.csv("data.csv")
#Add total and percentage columns
mydata$total <- mydata$p2p + mydata$cdn
mydata$percentage_p2p <- (mydata$p2p / mydata$total)
#convert stream an connected variables to factors
mydata$stream <- factor(mydata$stream)
mydata$connected <- factor(mydata$connected)
#view the dataset
head(mydata)
str(mydata)
summary(mydata)
take <- sample(unique(mydata$stream), 2)
subset_mydata <- mydata[mydata$stream %in% take, ]
str(subset_mydata)
dim(subset_mydata)
unique(mydata$stream)
take <- sample(unique(mydata$stream), 1)
subset_mydata <- mydata[mydata$stream %in% take, ]
str(subset_mydata)
dim(mydata)
take <- sample(mydata, 10000)
subset_mydata <- mydata[take, replace = TRUE]
take <- sample(mydata, 10000, replace = TRUE)
subset_mydata <- mydata[take,]
subset_mydata <- mydata[sample(nrow(mydata), 1000), ]
# install.packages("klaR")
# install.packages("corrplot")
require(klaR)
require(stats)
require(lattice)
require(corrplot)
library(FactoMineR)
# Changes the working directory to the folder of the current file
this.dir <- NULL
tryCatch(this.dir <- dirname(sys.frame(1)$ofile), error = function(e) print('Getting file path from location of the file.'))
if(is.null(this.dir))
this.dir <-dirname(rstudioapi::getActiveDocumentContext()$path)
if(is.null(this.dir)){
print("Setting working directory failed. Script might fail to work.")
}else{
setwd(this.dir)
print(paste("Working directory changed successfully to: ", this.dir))
}
#Read CSV File
mydata = read.csv("data.csv")
#Add total and percentage columns
mydata$total <- mydata$p2p + mydata$cdn
mydata$percentage_p2p <- (mydata$p2p / mydata$total)
#convert stream an connected variables to factors
mydata$stream <- factor(mydata$stream)
mydata$connected <- factor(mydata$connected)
#view the dataset
head(mydata)
str(mydata)
summary(mydata)
subset_mydata <- mydata[sample(nrow(mydata), 1000), ]
str(subset_mydata)
subset_mydata <- mydata[sample(nrow(mydata), 10000), ]
str(subset_mydata)
dim(subset_mydata)
mfa_subset_mydata <- subset_mydata[,c("isp","connected")]
res = MFA(mfa_subset_mydata, group=c(1,1), type=c("n","n"), ncp=5,
name.group=c("isp","connected"))
dim(mfa_subset_mydata)
res = MFA(mfa_subset_mydata, group=c(1,1), type=c("n","n"), ncp=5,
name.group=c("isp","connected"))
mfa_subset_mydata <- subset_mydata[,c("isp","browser","connected","percentage_p2p")]
res = MFA(mfa_subset_mydata, group=c(1,1,1,1,1), type=c("n","n","n","s"), ncp=5,
name.group=c("isp","browser","connected","percentage_p2p"))
res = MFA(mfa_subset_mydata, group=c(1,1,1,1), type=c("n","n","n","s"), ncp=5,
name.group=c("isp","browser","connected","percentage_p2p"))
